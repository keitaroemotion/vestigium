#!/usr/bin/env ruby

require 'colorize'
require '/usr/local/etc/vestigium/controller'
require '/usr/local/etc/vestigium/date_tool'
require '/usr/local/etc/vestigium/utility'
require '/usr/local/etc/vestigium/analyzer'

# import log with File.IO
# Read from target directory
# Read target directory from config

$rootdir = "/usr/local/etc/vestigium"
$config = "#{$rootdir}/config"
$schema = "#{$rootdir}/schema"
$db = "#{$rootdir}/db"

$config = file_to_map $config
$target_dir = $config["target_dir"]

def format_target_dir()
  return "#{$target_dir}/*".gsub("//","/")
end

def get_schema_id
  puts "--- Schema ID List  ---"
  list_schema
  print "choose the schema id: "
  schema_id = $stdin.gets.chomp
  return schema_id
end


case ARGV[0]
when "help", "-h"
  puts
  puts "vest [checklog]   ... check the actual log info by line"
  puts "vest [ clear  ]   ... clear the .db file "
  puts "vest [  reg   ]   ... convert log file into database   "
  puts "vest [ schema ]   ... check the schema config info "
  puts "vest [  see   ]   ... enlist all the data in database"
  puts "vest [  run   ]   ... run the program according to the DSL"
  puts ""
when "checklog"
  schema_id = get_schema_id
  print "target index? : "
  Dir[format_target_dir].each do |file|
    sample_log(file ,$stdin.gets.chomp.to_i)
  end
when "clear"
  system "rm -rf #{$db}/*"
when "reg"
  showERR ARGV, 1
  scheme_id = ARGV[1]
  if scheme_id == nil
    scheme_id = get_schema_id
  end
  Dir[format_target_dir].each do |file|
    log_to_database file, scheme_id, $schema, 1000  # parse and insert log data into sqlite
  end
when "schema"
  schema_id = get_schema_id
  schema = reflect_schema(schema_id, $schema)
  schema.keys.each do |key|
    print "[ "
    print key.to_s.red
    print " ] "
    puts schema[key].yellow
  end
when "see" # see scheme id or query(advanced)
  showERR ARGV, 1
  scheme_id = ARGV[1]
  if scheme_id == nil
    scheme_id = get_schema_id
  end
  res = get_data $tmp_path_cql, scheme_id, $db
  puts "--------------------------------------".yellow
  puts res
  puts "--------------------------------------".yellow
when "run" #auto run
  $lines = Hash.new
  def get_commands(scheme_id)
    commands = Array.new
    File.open("#{$schema}/#{scheme_id}.schema", "r").each do |line|
      line = line.chomp.strip
      if line.include? "|"
        lsp = line.split "|"
        $lines[lsp[0].strip.chomp] = lsp[1].chomp.strip
      end
      if line.start_with? "=>"
        line.strip.gsub("=>","").split(',').each do |com|
          if com != nil
            commands.push com.strip
          end
        end
      end
    end
    return commands
  end
  scheme_id = ARGV[1]
  if scheme_id == nil
    scheme_id = get_schema_id
  end
  formula_ids = get_commands scheme_id
  $lines.keys.each do |key|
    if formula_ids.include? key.chomp
      analyze "#{key} | #{$lines[key]}", scheme_id, reflect_schema(scheme_id, $schema), $tmp_path_cql
    end
  end

else
  scheme_id = ARGV[1]
  formula_id = ARGV[0]

  if ARGV.size < 2
    abort "argument size not sufficient."
  end

  File.open("#{$schema}/#{scheme_id}.schema", "r").each do |line|
    line = line.chomp.strip
    if line.start_with?(formula_id.strip)
      analyze line, scheme_id, reflect_schema(scheme_id, $schema), $tmp_path_cql
    end
  end
end



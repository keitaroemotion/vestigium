#!/usr/bin/env ruby

require 'colorize'
require '/usr/local/etc/vestigium/controller'
require '/usr/local/etc/vestigium/date_tool'
require '/usr/local/etc/vestigium/utility'
require '/usr/local/etc/vestigium/analyzer'
require '/usr/local/etc/vestigium/setting'

# import log with File.IO
# Read from target directory
# Read target directory from config

$rootdir = "/usr/local/etc/vestigium"

$console_conf = "#{$rootdir}/console"
$config = "#{$rootdir}/config"
$schema = "#{$rootdir}/schema"
$db = "#{$rootdir}/db"

$config = file_to_map $config
$target_dir = $config["target_dir"]

def format_target_dir()
  return "#{$target_dir}/*".gsub("//","/")
end

case ARGV[0]
when "help", "-h"
  puts
  puts "vest [checklog]   ... check the actual log info by line"
  puts "vest [ clear  ]   ... clear the .db file "
  puts "vest [  reg   ]   ... convert log file into database   "
  puts "vest [ schema ]   ... check the schema config info "
  puts "vest [  see   ]   ... enlist all the data in database"
  puts "vest [  run   ]   ... run the program according to the DSL"
  puts "vest [ esch   ]   ... edit schema "
  puts ""
when "esch"
  schema_id = get_schema_id
  puts "#{$schema}/#{schema_id}.schema"
when "checklog"
  schema_id = get_schema_id
  print "target index? : "
  Dir[format_target_dir].each do |file|
    sample_log(file ,$stdin.gets.chomp.to_i)
  end
when "clear"
  schema_id = get_schema_id
  print "Do you really wanna truncate #{schema_id}? [Y/n] : "
  if $stdin.gets.chomp.downcase == "y"
    system "mysql --user=vest --pass=vest -e 'truncate #{schema_id}.#{schema_id}';"
    puts "Database '#{schema_id}' truncated successfully!".green
  else
    puts "Truncation Cancelled! ".red.blink
  end
when "reg"
  showERR ARGV, 1
  scheme_id = ARGV[1]
  if scheme_id == nil
    scheme_id = get_schema_id
  end
  Dir[format_target_dir].each do |file|
    log_to_database file, scheme_id, $schema, 1000000  # parse and insert log data into sqlite
  end
when "schema"
  schema_id = get_schema_id
  schema = reflect_schema(schema_id, $schema)
  schema.keys.each do |key|
    print "[ "
    print key.to_s.red
    print " ] "
    puts schema[key].yellow
  end
when "see" # see scheme id or query(advanced)
  showERR ARGV, 1
  scheme_id = ARGV[1]
  if scheme_id == nil
    scheme_id = get_schema_id
  end
  res = get_data $tmp_path_cql, scheme_id, $db
  puts "--------------------------------------".yellow
  puts res
  puts "--------------------------------------".yellow
when "test"
  get_schema_id
when "conf"
  def conf_activity()
    print "[register:r] [show:s] [quit:q] : "
    case $stdin.gets.chomp
    when "r"
      write_console_conf
      conf_activity
    when "s"
      show_console_conf
      conf_activity
    when "q"
      abort
    else
    end
  end
  conf_activity
when "run" #auto run
  $lines = Hash.new
  scheme_id = ARGV[1]
  if scheme_id == nil
    scheme_id = get_schema_id
  end
  res = get_commands scheme_id, $lines
  formula_ids = res[0]
  $lines = res[1]
  settings = read_console_conf ARGV[2..ARGV.size-1]
  reports = Hash.new

  i = 0
  $lines.keys.each do |key|
    if formula_ids.include? key.chomp
      #puts
      reports = analyze "#{key} | #{$lines[key]}", scheme_id, reflect_schema(scheme_id, $schema), $tmp_path_cql, settings, reports
      i = 1
    end
  end
  if i == 0
    abort "Sorry, you did not specified valuable command.".red
  end

  reports.keys.each do |key|
    print "[#{'Formula'.green}] "
    print "#{key} ".gsub("  "," ").red
    opt = reports[key][0]
    report = reports[key][1..reports[key].size-1]
    case opt
    when "sum"
      print "\n[Sum]\n"
      display report
    when "count"
      print "\n[Count] \n"
      display report
    when "median"
      print "\n[Median] \n"
      display report
    when "mean"
      print "\n[Mean] \n"
      report.each do |elem|
        elem.keys.each do |e|
          puts "#{e.green} %.2f" % elem[e][0]
        end
      end
    else
    end
    puts
  end
  puts
else
  scheme_id = ARGV[1]
  formula_id = ARGV[0]

  settings = read_console_conf ARGV[2..ARGV.size-1]

  if ARGV.size < 2
    abort "argument size not sufficient."
  end

  File.open("#{$schema}/#{scheme_id}.schema", "r").each do |line|
    line = line.chomp.strip
    if line.start_with?(formula_id.strip)
      print "execute "
      print "#{line.split('|')[1]} ".red
      print "? : [Y/n]  "
      if $stdin.gets.chomp.downcase == "y"
        analyze(line, scheme_id, reflect_schema(scheme_id, $schema), $tmp_path_cql,settings)
      end
    end
  end
end



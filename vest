#!/usr/bin/env ruby

require 'colorize'
require '/usr/local/etc/vestigium/controller'
require '/usr/local/etc/vestigium/date_tool'
require '/usr/local/etc/vestigium/utility'
require '/usr/local/etc/vestigium/analyzer'

# import log with File.IO
# Read from target directory
# Read target directory from config

$rootdir = "/usr/local/etc/vestigium"
$config = "#{$rootdir}/config"
$schema = "#{$rootdir}/schema"
$db = "#{$rootdir}/db"

$config = file_to_map $config
$target_dir = $config["target_dir"]

def format_target_dir()
  return "#{$target_dir}/*".gsub("//","/")
end

case ARGV[0]
when "reg"
  showERR ARGV, 2
  scheme_id = ARGV[1]
  Dir[format_target_dir].each do |file|
    log_to_database file, scheme_id, $schema  # parse and insert log data into sqlite
  end
when "see" # see scheme id or query(advanced)
  showERR ARGV, 2
  scheme_id = ARGV[1]
    res = get_data $tmp_path_cql, scheme_id, $db
    puts res.yellow
else
  scheme_id = ARGV[1]
  formula_id = ARGV[0]

  if ARGV.size < 2
    abort "argument size not sufficient."
  end

  File.open("#{$schema}/#{scheme_id}.schema", "r").each do |line|
    line = line.chomp.strip
    if line.start_with?(formula_id.strip)
      analyze line, scheme_id, reflect_schema(scheme_id, $schema), $tmp_path_cql
    end
  end
end



